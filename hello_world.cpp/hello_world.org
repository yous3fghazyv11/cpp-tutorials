* اول برنامج ++C
[[https://example.com][فيديو الشرح]]

انا عارف ان في حاجات كتير انا مريت علي المواضيع مرور الكرام ومشرحتش كل حاجه بالتفصيل، بس دا لمصلحتك، لو شرحت كل حاجه بالتفصيل الفيديو هيبقي 10 ساعات ومش هتفهم حاجه، لذلك معلش انت هتسمع مصطلحات مش هتبقي فاهم معناها كويس، في حاجات انت مش هتبقي فاهم كويس بتشتغل ازاي، بس علي مدار المحاضرات الجايه في حاجات كتير هتوضح اكتر من كدا متقلقش، اهم حاجه عندي من في المحاضره دي انك تاخد general overview، وبعد كدا هنبدأ نخش في الحاجات دي بتعمق اكتر بكتير
** طباعه 'hello, world'
دائما لما اول برنامج بنعمله في اي لغه برمجه جديده بيكون مجرد برنامج بسيط مهمته انه يطبع 'Hello, World' في ال standard output مثلا زي كدا

[[../images/hello_world_exec.png]]

طبعا الكلام دا من جوا ال terminal والرموز =$ code/~= دي اسمها prompt ومعناها انه مستني مني input، فانا دخلتله =hello_world/.= علشان اقوله يعمل execute للبرنامج اللي اسمه hello_world، لو هتعمل دا من برا الترمينال فانت هيبقي عندك ملف اسمه hello_world هتعمل عليه double click هيفتحلك ال terminal وهيكتبلك جواها '!Hello, World'

لاحظ ان هنا علامه ال =/.= دي زي بظبط ما تكون بتعمل double click علي برنامج اسمه hello_world.exe مثلا، دي حرفيا بتقول لل shell بتاعي execute this file

علشان نعمل برنامج زي كدا في ++C هنحتاج نكتب الكود دا:

#+begin_src C++
// file hello_world.cpp
// Simple program to print out "Hello, World!" in the standard output (terminal)
#include <iostream>

int main()
{
    std::cout << "Hello, World!\n"; // the line that actually produces the output
    return 0;
}
#+end_src

وخلينا نبدأ نناقش كل سطر من البرنامج دا بيعمل ايه

*** ال comments
خلينا نبدأ نشرح السطر دا

#+begin_src C++
// Simple program to print out "Hello, World!" in the standard output (terminal)
#+end_src

السطر دا اسمه =comment= ، اي حاجه بتبدأ بعد علامه =//= او اتنين سلاش بتبقي comment، وال comments مش تعليمات بتتنفذ من قبل ال compiler، لاحظ انها اصلا مجرد كلام انجليزي عادي، هي مجرد كلام بنكتبه علشان المبرمج اللي بيقرأ الكود، واحنا هنا استخدمنا ال comments علشان نوضحلك البرنامج دا بيعمل ايه

#+begin_src C++
std::cout << "Hello, World!\n"; // the line that actually produces the output
#+end_src

لاحظ برضو في السطر دا في comment بعد ال =//=
واول حاجه عايزك تاخد بالك منها هي انك تقدر تكتب comments في نفس السطر اللي فيه الكود عادي بس لازم يكون في اخر السطر بعد لما خلصت الكود، لأن كل حاجه بعد ال =//= هتعتبر comment ولو عملت comment قبل ما الكود يخلص هتتفاجئ ان الكود بتاعك مش بيتقرأ ومش بيتنفذ، لحسن الحظ معظم ال IDEs وال Text Editors بيعملوا ال comments ب font معين يخلينا نقدر ناخد بالنا لو حاجه زي دي حصلت، بص مثلا المثال دا:

#+begin_src C++
std::cout << // comment "Hello, World!\n";
#+end_src

لو جربت تشغل الكود دا هيطلعلك error، لأن زي ما قلنا كل حاجه بعد ال =//= هتبقي comment لحد اخر السطر

انا عارف انت بتقول ايه دلوقتي، غالبا بتقول ايه يا عم الملل دا، انا ليه ممكن احتاج اكتب حاجه زي كدا في الكود بتاعي، الحقيقه انك *هتحتاج* تكتب دا في الكود بتاعك، وحتي في الامثله اللي هتشوفها في الكتاب دا، هتلاقي اكواد كتير انا بحط عليها comments علشان اشرحلك الاكواد دي بتعمل ايه، من غير ال comments ممكن كنت هتواجه صعوبه في الفهم، وكذلك لو انت بتقرأ كود حد تاني كاتبه، ممكن تلاقي نفسك بتشتم اللي كاتب الكود بسبب انه مش كاتب comments بتشرح الكود بيعمل ايه، بس كتابه ال comments مش سهله، معظم الناس بتكتب comments لمجرد انها يبقي اسمها كتبت comments، في احد الفيديوهات المتقدمه انا هشرح ازاي تكتب comments صح

*** عمليه الطباعه وال standard iostream
بغض النظر عن ال comments، خلينا نشوف السطر دا بتعمق اكتر

#+begin_src C++
std::cout << "Hello, World!\n";
#+end_src

انا شيلت الكومنت علشان ميبقاش مصدر الهاء ونقدر نركز علي السطر نفسه

اللي السطر دا بيعمله باختصار انه بينادي علي object اسمه =cout= واللي هو اختصار ل character output وده object متعرف في ال C++ standard library علشان كدا احتاجنا نسبقه ب =::std= وبيدخله ال string اللي اسمه "!Hello, World!\n" عن طريق ال operator =>>= واللي بيتقال عليه put to وهنا كلمه string معناها سلسله من الحروف او string of characters، وأي string هتدخله لل =cout= باستخدام ال put to operator او =>>= هيطبعها عندك في ال Terminal، فهو هيطبع "!Hello, World" لل standard output واللي هو ال terminal وبعد كدا بينزل سطر،

بمعني انه بعد لما هيخلص طباعه الحروف: ='!' ,'H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd'= هيقوم طابع الحرف =n\= وده هيخليه ينزل سطر، منغير ال =n\= البرنامج هيعمل كدا:

[[../images/hello_world_no_newline.png]]

طبعا احنا مش عايزين دا فهنحط ال =n\= بتاعتنا عادي

ولاحظ ان =n\= دي حرف واحد، اسمها newline character ودي بتندرج تبع مجموعه من الحروف اللي اسمهم escape characters، وكلهم بيبدؤا ب =n\= واحنا لحد الان احنا مش محتاجين نعرف اي escape characters تانيه غير ال =n\= بس بعد كدا هنلاقي نفسنا محتاجين نستخدم كتير منهم غير ال =n\=

*** الاستدعاء او include
ال object بتاعنا اللي اسمه =cout= مهواش جاي مع ال core بتاع ال ++C،
لأن ال =cout= دا واحد من حاجات كتير تقدر تستخدمها علشان تتعامل مع ال standard input output stream في ال ++C، وعلشان نستدعي الحاجات دي كلها ونقدر نستخدمها في البرنامج بتاعنا لازم نكتب السطر دا:

#+begin_src C++
#include <iostream>
#+end_src

كل اللي السطر دا بيعمله انه بيقول انه عايز يستدعي او يinclude ملف اسمه iostream، وهنا iostream اختصار ل input/output stream ودا عباره عن ملف متعرف فيه كتير من الحاجات اللي احنا هنبقي عايزين نستخدمها علشان نتعامل مع ال input وال output بتاعنا في حاله البرامج اللي بتشتغل في ال terminal زي مثلا ال =cout= اللي احنا بنستخدمه علشان نطبع حاجه في ال standard output او ال terminal

طبعا انت غالبا بتسأل دلوقتي، بيستدعيه ازاي بظبط؟

اولا ال iostream ما هو الا ملف ++C عادي، ولكنه مش مصمم علشان علشان يتم تنفيذه مباشره، بل معمول علشان يتم استعائه بالشكل اللي انت شفته دا، وده بيقال عليه header file ولما بتستدعي الملف دا، كل اللي بيحصل ان محتواه حرفيا بيتاخد copy paste للملف بتاعك

طيب ليه انا محتاج اعمل الحوارات دي كلها ومينفعش استخدم حاجه زي ال =cout= علطول؟

في لغات كتير بتخلي ال functions بتاعه الطباعه جذء من ال core بتاع اللغه، علي سبيل المثال في python انت لو عايز تطبع حاجه هتكتب الأمر دا:

#+begin_src python
print("Hello, World!")
#+end_src

اول حاجه هتلاحظ ان مفيش =n\= وده لأن الطباعه في python من نفسها بتنزل سطر بعد لما تخلص طباعه ال string

تاني حاجه هتلاحظها اننا مش محتاجين نعمل include لحاجه علشان نطبع، ال function اللي اسمها =()print= جايه مع ال core بتاع اللغه، وده قد يبدو شيئ كويس، بس في الحقيقه هو مش كويس اوي ومش وحش اوي، يمكن ال ++C احسن علشان بتخليك تستدعي او ت include ال iostream علشان تستخدم الحاجات المسؤوله عن الطباعه وخليني اشرحلك ليه

في ++C ال iostream مش مجرد ملف صغير كدا بيديلك ال =cout= وخلاص، الحقيقه ان ال iostream ملف ضخم جدا بيتكون من عشرات الألاف من السطور، ولما بستدعيه مش بيديلك بس ال cout، لا دا كمان بيديلك حاجات تانيه كتير جدا تقدر تستخدمها علشان تتعامل مع ال standard input/output stream من خلال ال terminal

لو عايز تعمل برنامج بيشتغل جوا ال terminal او command line interface (cli) application لازم هتحتاج تستخدم ال iostream

بس في نفس الوقت لو انت مش بتعمل برنامج بيشتغل في ال terminal زي مثلا برنامج ب graphical user interface (gui) او لو بتعمل برنامج بيشتغل في ال terminal بس مش بيطلع حاجه وبيشتغل في صمت وبرضو مش بياخد منك input معين، انت مش هتبقي محتاج ال iostream وفي الحاله دي انت مش هتبقي عايز يبقي في حوالي 50 الف سطر كود في البرنامج بتاعك موجودين بدون سبب، لأنك مش هتحتاج مثلا تستخدم حاجه زي cout

فممكن كمبتدئ تحس ان انا ليه محتاج اني استخدم include علشان استدعي ال cout علشان بس اطبع حاجه علي الشاشه، بس لما مستواك يعلي وتلاقي انك بتعمل برامج مش محتاجه ال iostream هتبقي مبسوط انه مش دايما قاعد عندك في البرنامج حتي وانت مش محتاجه

ال iostream ومجموعه تانيه كبيره جدا من الheader files مع بعض بيتقال عليهم ال standard library ولما بنستخدم حاجه متعرفه فيهم بنكتب قبلها =::std=

*** ال main function
**** ايه هي ال functions
قبل ما نتكلم عن ال main function، خلينا الأول نعرف يعني ايه functions اساسا!

غالبا اخر مره سمعت فيها كلمه function او *داله* كانت اثناء دراستك للرياضه او ال mathematics.

في الرياضه عرفنا ان في حاجه اسمها دوال نقدر نستخدمها علشان نحسب قيمه معينه باستخدام متغير معين، خد عندك علي سبيل المثال واحده من الدوال المشهوره وهي الداله التربيعيه اللي بتقول: =د(س) = س^2= وبتتنطق داله السين تساوي سين تربيع

كل اللي الداله دي بتعمله باختصار انك بتدخلها قيمه للمتغير =س= وبتطلعلك قيمه بنائا علي القيمه اللي دخلتها، علي سبيل المثال =د(3) = 3 ^ 2= وده هيساوي 9، لاحظ ان كل اللي احنا عملناه اننا بدلنا كل =س= ب 3، وكذلك =د(4) = 16= وهكذا، وممكن ايضا نعمل داله تانيه مثلا نسميها =ف(س،ص)= وده اسمه تعريف الداله وبيتكون من اسم الداله (في الحاله دي الداله اسمها ف)، والمتغيرات او ال parameters اللي بتقبلها (في الحاله دي الداله بتقبل المتغير =س= والمتغير =ص= مفصولين ب ، او فاصله)، وبعد كدا بعد علامه ال = بنحط القاعده الجسم بتاع الداله، مثلا الداله بتاعتنا =ف(س،ص)= لما نحطلها body هيبقي شكلها كدا
=ف(س،ص) = س * ص= ، هنا الداله دي بتاخد مننا متغيرين او بتقبل two parameters، وبتضربهم في بعض، فمثلا =ف(3،4) = 3 * 4= وده هيساوي 12، وكذلك
=ف(3،5) = 15= وهكذا

**** ال functions في ال ++C
البرمجه برضو فيها functions، وزيها زي الرياضه بظبط بتقبل منك paramters وبتعمل عليهم شويه عمليات وتطلعلك output.

علشان نعرف function في ++C بنعمل حاجه بالشكل دا:

#+begin_src text
return_type func_name(parameters_list)
{
	function body
}
#+end_src

خلينا نتكلم الاول عن المنظر دا =func_name(parameters_list)= ، زي ما انت شايف كدا تقريبا الموضوع مختلفش كتير عن الرياضه اللي كنا بندرسها، برضو بنعرف داله بأسم معين وبنفتح اقواس وندخل جوا ال paramters اللي الداله بتاخدهم، الجديد هنا انك بتعرف العمليات اللي الداله بتعملها علي المتغيرات دي جوا الأقواس {} مش بعد علامه ال =

السبب في ده ان في البرمجه انت ممكن تعمل عمليات كتير جدا جوا ال function مش مجرد انك مثلا تضرب رقمين، فمثلا لو حبينا اننا نعمل ال function بتاعه
=د(س) = س ^ 2= بال ++C هنعلمها بالشكل التالي:

#+begin_src C++
int f(int x)
{
	return x * x;
}
#+end_src

تقريبا انت المفروض تكون فاهم كل حاجه معدا بس =int= و =return= ، غير كدا فالداله دي اسمها f وبتاخد منك paramter اسمه x بترجعلك x * x اللي هي x تربيع يعني

ونقدر نستخدم الداله دي بعد كدا في الكود بتاعنا بالشكل دا:

#+begin_src C++
#include <iostream>

int f(int x)
{
	std::cout << "i will now execute the function f(x)\n";
	return x * x;
}

int main()
{
	std:: cout << f(3);
	return 0;
}
#+end_src

الكود دا هيطبع "i will now execute the function f(x)" وبعدها علطول هيطبع 9 في ال terminal، وهنا لاحظ ان =f(3)= *بترجع* 9 زي بظبط لو كنا استخدمنا داله في الرياضه، ولاحظ برضو ان cout يقدر انه يطبع النتايج بتاعه ال functions، زي ما يكون تقريبا f(3) دي اتشالت واتحط بدالها 9، بس انت عارف انها متشالتش ولا حاجه، كل اللي حصل ان الfunction دي *اتنفذت*

بالنسبه بقا ل int اللي في =()int f= دي بتقول ان الداله دي هترجع قيمه من نوع int او integer، وده لأن علي عكس الرياضه اللي دايما بترجع قيم عدديه، في البرمجه ممكن الدوال عندنا ترجع قيم مش عدديه، وكذلك int اللي في =int x= بتعرف الداله انها هتستقبل parameter من نوع integer او قيمه عدديه، علشان برضو الدوال في البرمجه علي عكس الرياضه تقدر تستقبل parameters مش ارقام عدديه، زي مثلا الداله دي:

#+begin_src C++
#include <iostream>
#include <string>

std::string add(std::string name)
{
	std::cout << "i will now execute the function add(name)\n";
	return "hello, " + name + " how are you doing today?";
}

int main()
{
	std::cout << add("yousef");
	return 0;
}
#+end_src

اول حاجه هتلاحظ ان الداله دي بدل ما هي بترجعلك قيمه عدديه، لا هي بترجع string، وكمان بتاخد منك string بدل int، وكمان هتلاحظ ان ال string زيه زي ال cout محتاج اننا نعمل include لل header file بتاعه علشان نقدر اننا نستخدمه، وبرضو بنكتب قبله =::std= زي ال cout بظبط

تاني حاجه هتلاحظها، ان اسم ال function واسم ال paramters ممكن يبقوا اكتر من حرف عادي

تالت حاجه هتلاحظها هي اننا نقدر نعمل عمليه الجمع علي ال string، بس الحقيقه دي مسمهاش جمع، دي اسمها string concatenation، وهي باختصار انك بتدخل كذا string علي بعضه، مثلا "hello" + "world" هيطلعولنا "helloworld" ولاحظ ان العمليه دي مش بتحط اي مسافات من عندها، علشان كدا لو تلاحظ الكود بتاعي هتلاقيني كاتب: ="?hello, " + name + " how are you doing today"= وحاطط مسافه بعد ,hello ومسافه قبل how علشان يطلع المنظر مظبوط

بمناسبه المنظر صحيح، لو جربت تشغل الكود دا هتلاقي المنظر سيئ جدا، حتي في ال function اللي قبلها اللي هي f(x) برضو في مشكله، الاتنين مش بيطبعوا ال =n\=
او ال newline character، وحل المشكله دي سهل:

#+begin_src C++
#include <iostream>
#include <string>

std::string add(std::string name)
{
	return "hello, " + name + " how are you doing today?";
}

int f(int x)
{
	return x * x;
}

int main()
{
	std:: cout << f(3) << '\n';
	std::cout << add("yousef") << '\n';
	return 0;
}
#+end_src
