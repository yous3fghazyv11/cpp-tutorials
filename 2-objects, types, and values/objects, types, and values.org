* البيانات في ال ++C
المحاضره دي هتشرح انواع البيانات في ال ++C ال Data Types وازاي ناخد data من ال standard input stream او الkeyboard ونفهم يعني ايه data و data types و objects و values و variables

** ازاي ناخد input؟
لحد الان كل اللي برنامج hello_world بتاعنا بيعمله انه بيطبع "!Hello, World" بس، مش بيعمل اي حاجه تاني، مش مش بيقرأ اي حاجه، مش بياخد input من اليوزر، زي ما انت شايف كدا الموضوع ممل شويه، البرامج الحقيقيه معظم الوقت بتعمل حاجه مختلفه علي حسب الinput اللي بتديهولها، بدل من انها مجرد بتعمل نفس الشئ مرارا وتكرارا كل مره تشغل البرنامج فيها

علشان ناخد داتا من اليوزر ونخزنها علشان نستخدمها بعد كدا في البرنامج، عايزين حاجه زي database نخزن فيها الداتا دي، والdatabase دي هي ال memory بتاعه الكمبيوتر بتاعك.

لما بنيجي ناخد input من اليوزر لازم الاول نحجزله مكان في الmemory علشان نحط فيها الdata اللي اليوزر هيدخلها، والمكان دا بيتقال عليه object.

الobject هو مكان في الmemory عندك محجوز علشان يتحط فيه نوع معين من البيانات، ولما بندي للobject دا اسم بيتقال عليه variable. علي سبيل المثال ال character strings بتتحط في string variable، وال integers بتتحط في int variable، تقدر تتخيل الvariable دا صندوق في الmemory عندك ليه اسم وحجم ونوع معين نقدر نحط فيه داتا من نفس نوع الصندوق، خلينا ناخد مثال:

#+begin_src C++
#include <iostream>

int main()
{
    std::cout << "Please type your age:\n> ";
    int age;
    std::cin >> age;
    std::cout << "your age is " << age << '\n';
    return 0;
}
#+end_src

ال =include#= وال =main= احنا كدا كدا بالفعل عرفناهم من المحاضرات اللي فاتت، وبما اننا كدا كدا هنحتاج نعمل =<include <iostream#= في تقريبا كل البرامج في خلال الكام محاضره الجايين، فحنا معدناش هنكتبها افتراضا بأنك كدا كدا عارف انها اساسيه، وبرضو احنا ساعات كتير هنكتب كود مش هيشتغل غير لو حطيته جوا ال main زي مثلا:

#+begin_src C++
std::cout << "hello\n";
#+end_src

فانا برضو بفترض اني مش محتاج اقولك تحط الكود دا في ال main علشان يشتغل ولو حطيته في اي حته تانيه مش هيشتغل، وكدا كدا لو متعرفش ال compiler هيعرفك.

اول سطر عندنا في ال main بيطبع رساله " <Please type your age:\n" ودي بيتقال عليها prompt وبيبقي شكلها كدا:

[[../images/prompt.png]]

وزي ما انت شايف بيقولك تعمل ايه، بعدها ينزل سطر ويكتب " <" وبعدها يسيبك تدخل input

السطر اللي بعده:

#+begin_src C++
int age;
#+end_src

دا *بيعرف* variable من النوع int اسمه age، بمعني انه بيحجز مكان في ال memory عندك (object) وبيديله اسم (age) وبيخليه جاهز انه يتخزن فيه قيم من نوع int (ارقام صحيحه)

[[../images/empty_int_variable.png]]

السطر اللي بعده هتلاحظ انه شبه السطر اللي بيطبع بس مع بعض الاخلافات:

#+begin_src C++
std::cin >> age;
#+end_src

السطر دا بياخد input من ال standard input stream (الkeybaord في الترمينال) عن طريق object الcin وده object من الistream او الinput stream وبيحطه في المتغير age عن طريق الoperator =<<= واللي اسمه *get from*

يعني نقدر نقول ان السطر دا بيتقرأ: get input from the standard input stream using cin which is in the standard library and put it in the age variable.

وبعد تنفيذ السطر دا، بفرض مثلا اننا دخلناله 20 ك input، المنظر هيبقي كدا:

[[../images/int_variable_not_empty.png]]

السطر بقا اللي بعده:

#+begin_src C++
std::cout << "your age is " << age << '\n';
#+end_src

دا سطر طباعه عادي، بس هتلاحظ كذا حاجه، اولا اننا نقدر نطبع كذا حاجه مع بعض (ورا بعض) عادي باستخدام ال operator =>>= منغير مشاكل.

لو كنا بنحب التكرار والكتابه الكتير كان ممكن نعمله بالشكل دا:

#+begin_src C++
std::cout << "your age is ";
std::cout << age;
std::cout << '\n';
#+end_src

والاتنين كانوا هيطلعوا نفس ال ouput عادي، بس احنا دايما في البرمجه بنحاول نقلل حجم الكود علي قد ما نقدر، وبنحاول نقلل التكرار دايما لأن التكرار وزياده حجم الكود يعني احتماليه اكبر لظهور ال errors.

تاني حاجه هتلاحظ اننا نطبع القيم اللي بيخزنها ال variable عادي، بس مش بنستخدم بقا =""= حوالين اسم الvariable، لأننا لو عملنا كدا هيطبع كلمه age حرفيا، واحنا مش عايزين كدا احنا قصدنا علي المتغير age.

تالت حاجه هتلاحظ اننا نستخدم =''= حوالين ال =n\= بدل =""= وده لأن زي ما قلنا قبل كدا =n\= حرف واحد مش string، وفي ال ++C ومعظم لغات البرمجه، الأفضل انك تستخدم مع الحروف ' ومع الstring "، مثلا 'c' دا حرف، و "hello" دا string.

فأحنا مثلا لو نفذنا البرنامج دا هيحصل المنظر الأتي:

[[../images/execution_of_get_age_program.png]]

هتلاحظ اننا بنشغل البرنامج، بيديلنا ال prompt الحلوه بتاعتنا، بنكتب 20 وبنضغط enter واللي ساعات بيتقال عليها return، وبيقولي your age is 20.

خلينا نبص بصه علي برنامج تاني برضو بيعمل حاجه مشابهه:

#+begin_src C++
#include <iostream>
#include <string>

int main()
{
    std::cout << "Please type your name:\n> ";
    std::string name;
    std::cin >> name;
    std::cout << "Hello, " << name << "!\n";
    return 0;
}
#+end_src

اول حاجه هتلاحظ اننا علشان نقدر نتعامل مع ال strings هنحتاج نستخدم المكتبه او ال header file اللي اسمه string ودا برضو header تبع ال C++ standard library وبرضو علشان نستخدم ال strings جوا الكود لازم نحط قبلهم =::std= غير كدا البرنامج تقريبا زيه زي اللي فات بظبط، وتنفيذه هيبقي عامل كدا:

[[../images/execution_of_get_name.png]]

** الvariables
ببساطة، ما نقدرش نعمل أي حاجة مفيدة على الكمبيوتر من غير ما نخزن بيانات في الmemory، زي ما عملنا مع الinput statement في المثال اللي فوق. "الأماكن" اللي بنخزن فيها البيانات دي بنسميها كائنات (objects).

علشان نوصل ونستخدم object لازم يكون له اسم. الobject اللي له اسم بنسميه متغير (variable)، وبيكون له نوع محدد (type) زي int أو string. النوع ده هو اللي بيحدد إيه اللي ممكن نحطه جوه المتغير (زي مثلًا: 123 ممكن يتحط في int، و"Hello, World!\n" ممكن يتحط في string)، وكمان بيحدد إيه العمليات اللي ممكن نعملها عليه (زي إننا نضرب أعداد صحيحة او integers باستخدام الoperator *، أو نربط بين نصوص --نعمل concatentation-- باستخدام الoperator +).

القيم اللي بنحطها جوه المتغيرات دي بنسميها قيم (values).

الجملة اللي بتعرّف variable جديد اسمها (مش مفاجأة) تعريف (definition)، وغالبًا (ومن الأفضل) يكون فيها قيمة ابتدائية (initial value). مثلا:

#+begin_src C++
std::string name = "yousef";
int number_of_steps = 33;
#+end_src

القيمه اللي بتيجي بعد علامه اليساوي ~=~ بيتقال عليها initializer او قيمه ابتدائيه.

تقدر تتخيل الvariables دي كobjects في ال memory بالشكل دا:

[[../images/objects_in_memory.png]]

ولاحظ اننا مينفعش نحط نوع غلط من البيانات جوا variable، لازم نحط الdata بشكل يكون according to the variable type، مثلا:

#+begin_src C++
int age = "yousef";	    // error: "yousef" is not an integer
std::string name = 20;  // error: 20 is not a string
#+end_src

الcompiler بياخد باله من نوع كل variable، وبيتأكد إنك بتستخدمه بالطريقة اللي تناسب نوعه، النوع اللي انت اختارته وانت بتdefine او بتعرف ال variable.

عندنا في ال ++C في عدد كبير جدا من الprimitive types بتيجي مع اللغه، بس في الأول كدا خلينا نعرفك علي 5 بس منهم:

#+begin_src C++
int number_of_steps = 33;     // int for integer numbers
double flying_time = 3.5;     // double for floating-point numbers
char decimal_point = '.';     // char for individual characters
std::string name = "yousef";  // string for character strings
bool tap_on = true;           // bool for logical variables
#+end_src

السبب في اسم =double= دا تاريخي شويه، double هنا معناها double-precision floating point، والfloating point هي طريقه الكمبيوتر في التعبير عن الأعداد الحقيقه.

ولاحظ ان كل نوع من دول ليه الستايل المميز بتاعه في طريقه كتابته واللي بيتقال عليه literal:

#+begin_src C++
33        // int: an integer
3.5       // double: a floating-point number
'.'       // char: an individual character enclosed in single quotes
"yousef"  // string: a sequence of characters delimited by double quotes
true      // bool: either true or false
#+end_src

يعني إيه؟ يعني تسلسل من الأرقام (زي 1234 أو 2 أو 976) معناه عدد صحيح (integer)، وحرف واحد جوا single quotes (زي '1' أو '@' أو 'x' أو 'n\') معناه حرف، وتسلسل أرقام فيه نقطة عشرية (زي 1.234 أو 0.12 أو 92.) معناه رقم عشري (floating-point)، وتسلسل من الحروف جواه double quotes (زي "1234" أو "Hello!\n" أو "yousef") معناه نص (string).

** الinput مع الtypes
عمليه انك تاخد input باستخدام ال get from operator او =<<= بتبقي حساسه للtype بتاع القيمه اللي داخله ونوع الvariable اللي انت بتدخل فيه، وبتقرأ بنائا علي الtype بتاعهم، بص كدا المثال دا مثلا:

#+begin_src C++
int main()  // read name and age
{
    std::cout << "Please enter your first name and age\n> ";
    std::string first_name;          // string variable
    int age = 44;                    // integer variable with arbitrary value
    std::cin >> first_name >> age;   // read a string followed by an integer
    std::cout << "Hello, " << first_name << " (age " << age << ")\n";
}
#+end_src

زي ما انت شايف نقدر اننا نقرأ كذا قيمه مره واحده زي ما نقدر نطبع كذا قيمه مره واحده.

تعالي نجرب نلعب شويه مع البرنامج دا ونشوف هيتصرف ازاي في حالات مختلفه:

[[../images/test_name_age.png]]

زي ما انت شايف اول مره شغلناه، لما بنكتب "yousef 20" الopeartor =<<= بيقرأ "yousef" في =first_name= بعد كدا 20 في =age= ، طب ليه ميقرأش "yousef 20" كلها في =first_name= ؟ علشان قرائه الstrings بتنتهي بال whitespace، اللي هي الspace أو newline أو tab، انما غير كدا الwhitespaces في الطبيعي بيتم تجاهلها من قبل =<<= .

جرب مثلا تدخله الinput دا: "       yousef          20        "، هتلاقيه بيقولك "hello, yousef age(20)" عادي منغير whitespaces

بس لو جيت تكتب 20 وبعدها yousef بالشكل اللي انت شفته لما شغلنا البرنامج مره تانيه هتلاقيه قالك "hello, 20 (age 0)"، ليه؟ علشان هو هيقرأ 20 في =frist_name= عادي، لأن في الأول وفي الاخر "20" عباره عن سلسله من الحروف عادي ينفع تتقرأ في string، انما "yousef" مينفعش تتقرأ في int فمش هيعرف يقرأها في age، فبيحط 0 وبيشيل ال 44 اللي كانت موجوده.

زي ما انت شفت، عمليه القرائه للstrings بتنتهي بالwhitespace بمعني انه مش هيعرف يقرأ غير كلمه واحده، بس افرض احنا عايزين نقرأ اكتر من كلمه؟ في طرق كتير تقدر تعمل بيها كدا، مثلا ممكن نقرأ اسم من كلمتين بالشكل دا:

#+begin_src C++
int main()
{
    std::cout << "Please enter your first and second names\n> ";
    std::string first;
    std::string second;
    std::cin >> first >> second;   // read two strings
    std::cout << "Hello, " << first << " " << second << '\n';
}
#+end_src

ببساطه بنستخدم =<<= مرتين لكل اسم، ولو عايزين نطبع الأسامي دي لازم نحط مسافه بينهم.

لاحظ ان مفيش initializer للtwo variables بتوعنا =first= و =second= مع اننا قلنا ان المفروض دايما نحط initializers، وده لأن by default الstrings بيتعملها initialization ل empty string، بمعني ان:

#+begin_src C++
std::string first;	      // initialized to "" or empty string
std::string second = "";  // initialized to "" or empty string
// so basically both are the same
#+end_src

-----------------------
 *مثال ليك:*
جرب تكتب برنامج ال name وال age بتاعنا دا، وعدله بحيث انه يطبع العمر بالشهور، يعني لو شخص دخل عمره 20 سنه يقوله انه عمره 240 شهر، فانت كدا هتحتاج تضرب العمر في 12، واستخدم double بدل int علشان الأطفال اللي ممكن بكل فخر يبقي عمرهم 6 سنين ونص.
-----------------------

** العمليات والOperators
بالأضافه للقيم اللي ينفع نحطها في الvariable، نوع الvariable ايضا بيحدد العمليات اللي نقدر نعملها عليه ومعناها ايه، علي سبيل المثال:

#+begin_src C++
int age = -1;
std::cin >> age;                  // >> reads an integer into age
std::string name;
std::cin >> name;                 // >> reads a string into name
int a2 = age + 2;            // + adds integers
std::string n2 = name + " Jr. ";  // + concatenates strings
int a3 = age - 2;            // - subtracts integers
std::string n3 = name - " Jr. ";  // error: - isn’t defined for strings
#+end_src

لما نقول error فاحنا قصدنا ان ال compiler مش هيرض يcompile البرنامج دا وهيطلعلك error ان الoperator =-= مش متعرف لل strings، الcompiler عارف كويس ايه العمليات اللي تنفع علي المتغيرات من النوع الفلاني

تعالي مثلا نشوف بعض ال operations اللي ممكن تتعمل علي الfloating-point numbers من النوع double:

#+begin_src C++
#include <cmath>

int main()          // simple program to exercise operators
{
    std::cout << "Please enter a floating−point value: ";
    double n = 0;
    std::cin >> n;
    std::cout << "n == " << n
              << "\nn+1 == " << n+1
              << "\nthree times n == " << 3*n
              << "\ntwice n == " << n+n
              << "\nn squared == " << n*n
              << "\nhalf of n == " << n/2
              << "\nsquare root of n == " << std::sqrt(n)
              << '\n';
}
#+end_src

طبعًا، العمليات الحسابية العادية ليها نفس الشكل والمعنى اللي اتعلمناه في المدرسة. الاستثناء الوحيد هو إن علامة المساواة بتكون ~==~ مش ~=~ ، لأن ~=~ في البرمجة معناها "assignment" او انك تعين قيمه للمتغير او الvariable مش مقارنة. يعني بنستخدمها عشان نحط قيمة في متغير.

طبيعي برضو إن مش كل حاجة ممكن نعملها على الأرقام (زي الجذر التربيعي مثلًا) تكون متاحة كـ"عملية مباشرة" باستخدام operator. عشان كده في عمليات اوoperations بنستخدم فيها functions ليها أسماء. في الحالة دي، لو عايزين نجيب الجذر التربيعي لعدد n، بنستخدم function اسمها sqrt من ال C++ standard library، علشان كدا اضطرينا نعمل include لheader file اسمه =cmath= وكتبنا قبلها =::std= ، وبنكتبها كده: =sqrt(n)= ، ودي طريقة معروفة في الرياضيات.

-----------
*مثال ليك*
اكتب البرنامج الصغير ده وخليه يشتغل. بعد كده عدله عشان يقرأ عدد صحيح (int) بدل ما يقرأ عدد عشري (double). كمان جرب عليه شوية عمليات أو operations تانية، زي عملية باقي القسمة او ال modulo =%=. خد بالك إن لما بنشتغل بـ int، القسمة =/= بتكون قسمة عددية صحيحة، يعني النتيجة من غير كسور، و =%= معناها الباقي بعد القسمة.

يعني مثلًا:
=5 / 2= نتيجتها 2 (مش 2.5 ولا 3)
و =5 % 2= نتيجتها 1
-----------

ال strings ليهم عدد اقل من ال operations بس زي ما هنشوف بعد كدا ان ليهم كتير من ال operations علي شكل functions. بس الoperations اللي بتتعمل عليهم باستخدام operator بتبقي نوعا ما سهله ومنطقيه، زي كدا مثلا:

#+begin_src C++
int main()  // read first and second name
{
    std::cout << "Please enter your first and second names\n";
    std::string first;
    std::string second;
    std::cin >> first >> second;              // read two strings
    std::string name = first + ' ' + second;  // concatenate strings
    std::cout << "Hello, " << name << '\n';
}
#+end_src

في حاله الstrings ال =+= معناها concatenation، يعني لو s1 و s2 دول two strings، فا =s1 + s2= معناها ان الحروف بتاعه s2 هتكمل بعد الحروف بتاعه s1

** الassignment والinitialization
واحد من اهم الoperators واكثرهم اثاره للأهتمام هو ال assignment operator ~=~ واللي بيعمله انه بيحط قيمه جديده في الvariable

[[../images/assignment_ints.png]]

ركز علي اخر assignment. أولا، واضح جدا ان هنا علامه ال ~=~ تساوي بمعني المقارنه المتعارف عليه، لأن =a = a + 7= دي مستحيله رياضيا، هنا علامه ~=~ معناها اننا عايزين نحط قيمه جديده في =a= والقيمه دي هتساوي =a + 7= و =a= المفروض انها كانت ب =4= و 4 + 7 ب 11، فأكننا بنقوله اننا عايزين نغير قيمه =a= ل 11.

ونقدر برضو نعمل نفس الحوار بال strings:

[[../images/assignment_strings.png]]

لاحظ اننا بنستخدم المصطلحين starts out with و gets علشان نفرق بين عمليتين متشابهين نوعا ما بس منطقيا مختلفين:

احنا بنستخدم "يبدأ بـ" (starts out with) و"بياخد" أو "بيتحطله" (gets) عشان نفرّق بين عمليتين شبه بعض، لكن من الناحية المنطقية مختلفين:

+ الInitialization: يعني بندي للمتغير للvariable قيمة ليه لما علطول واحنا بنعرفه.
+ الAssignment: يعني بنغير قيمة المتغير ونديه قيمة جديدة بعد ما اتعرف.

من الناحية المنطقية، الinitialization والassignment مختلفين. مبدئيًا، الinitialization بيحصل والvariable لسه فاضي. أما الassignment فهو لازم (من حيث المبدأ) يشيل الvalue القديمة من الvariable قبل ما يحط الجديدة.

تقدر تتخيل الvariable كأنه علبة صغيرة، والvalue اللي بتتحط فيه كأنها عملة معدنية. قبل الinitialization، العلبة فاضية، لكن بعد ما بنعمل initialization، العلبه دايما بيكون فيها عمله. فلما تيجي تحط عملة جديدة (يعني تعمل assignment)، لازم الأول تشيل العملة القديمة — أو بمعنى تاني "تتخلص من القيمة القديمة"، وممكن حتي نستخدمها كمرجع للvalue الجديده زي ما شفنا في مثال =a = a + 7= .

طبعًا في الmemory الموضوع مش بالتبسيط المخل دا، بس دي طريقة كويسة تساعدك تتخيل اللي بيحصل.

*** مثال: detect repeated words
لو تلاحظ هتلاقي الassignment بتبقي مفيده اكتر حاجه لما نبقي عايزين نغير قيمه نفس الvariable كذا مره، تعالي مثلا نبص علي البرنامج دا اللي بيdetect الكلمات المتكرره:

#+begin_src C++
int main()
{
    std::string previous;
    std::string current;
    while (std::cin >> current)
    {
        if (current == previous)
        {
            std::cout << "word: " << current << " repeated\n";
        }
        previous = current;
    }
}
#+end_src

تعالي نبص علي البرنامج دا سطر سطر
