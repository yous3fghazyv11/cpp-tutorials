#+TITLE: Errors
#+AUTHOR: Yousef Ghazy
#+DESCRIPTION: Hendling errors in programs
#+OPTIONS: toc:nil

المحاضره دي هتتكلم عن الerrors في البرامج بتاعتنا وازاي نلاقيها ونصلحها

* مقدمه
احنا ذكرنا كلمه error كتير جدا في المحاضرات اللي فاتت، ولو كنت عملت الdrill وشويه exercises انت غالبا عندك فكره ليه، الerrors لا يمكن تجنبها انثاء كتابه اي برنامج.

غالبا انت في كل برنامج منهم كنت دايما بعد لما بتفتكر انك خلصت البرنامج بتلاقي لما تيجي تشغله انه بيعمل حاجه غير اللي انت كنت عايزه يعملها، وتلاقي نفسك رجعت تبص علي الكود بتحاول تفهم الكود اللي انت كتبته بيعمل ايه. او ممكن تكون لاحظت ان كتير من البرامج اللي احنا كتبناها سهل جدا اننا نخليها تعمل حاجات غريبه لو ادينالها bad input.

الشابتر دا هنحاول نتأكد ان من هنا ورايح البرامج اللي بنعملها تكون خاليه تماما من الerrors، او علي الاقل الerrors اللي احنا بنعتبرها مينفعش تكون موجوده.

في طرق كتير لتصنيف الـ errors. مثلاً:
- الCompile-time errors: دي الـ errors اللي الـ compiler بيكتشفها. وممكن نقسمها أكتر حسب القواعد اللي بتكسرها:
  * الSyntax errors
  * الType errors
- الLink-time errors: دي الـ errors اللي الـ linker بيشوفها وهو بيجمع الـ object files علشان يطلع الـ executable.
- الRun-time errors: دي اللي بتحصل وقت ما البرنامج بيشتغل. وممكن نقسمها كده:
  * اللي الـ computer أو الـ OS بيكتشفها
  * اللي الـ library (زي الـ standard library) بيكتشفها
  * اللي الـ user code بيكتشفها
(النوع ده كمان بنسميه Logic errors)

بس الليستة دي متفائلة شوية، لإننا "نسينا" نوعين من أسوأ الـ errors:
- الUndetected logic errors اللي بتؤدي لـ crash أو نتايج غلط من غير ما حد يلاحظ.
- ان يكون في اختلاف بين اللي الـ user محتاجه واللي الـ code بيعمله فعلًا.


سهل قوي نقول إن شغلانتنا كـprogrammers هي إننا نخلّي البرنامج خالي تماما من أي errors. وده طبعًا هو المثالي، بس غالبًا مش عملي. في الحقيقة، في البرامج الكبيرة في الواقع، بيكون حتى صعب نحدد يعني إيه "كل الـ errors".

يعني مثلًا، لو حد شد سلك الباور من الكمبيوتر وانت البرنامج شغال، هل ده error المفروض كنت تتعامل معاه؟
في الغالب، الرد بيكون "طبعًا لأ".
لكن لو البرنامج بتاعك بيتابع حالة مريض، أو بيشغّل سنترال تليفونات؟
ساعتها، ممكن المستخدم يتوقّع إن السيستم (اللي برنامجك جزء منه) يقدر يتصرف بشكل معقول حتى لو الكهربا قطعت أو حصل خلل في الـ memory بسبب شعاع كوني.

السؤال المهم هنا بيبقى:
هل البرنامج بتاعي المفروض يتعامل مع الerror دا؟

معدا لو explicitly قلنا عكس كدا، احنا هنفترض ان البرنامج بتاعك:
- المفروض يطلع نتايج صح لكل الlegal inputs
- يطلع error messages مظبوطه لكل الillegal inputs


المطالب دي تعتبر اقل حاجه لازم تبقي موجوده في البرنامج بتاعك علشان نقدر نقول عليه برنامج كويس، واننا نعمل برامج كويسه هو هدفنا.

وإحنا بنكتب برامج، طبيعي جدًا إن errors تحصل ومش ممكن نتفاداها بالكامل؛ السؤال الحقيقي هو: إزاي نتعامل معاها؟

تجنب واكتشاف وتصحيح الـ errors بياخد أكتر من 90% من مجهود شغل أي برنامج كبير.
ولو البرنامج safety-critical (زي اللي بيتحكم في طيارة أو جهاز طبي)، فالمجهود ده ممكن يبقى أكتر كمان

* مصادر الerrors
فيه كذا مصدر ممكن يسبب errors في البرامج، منها:
1. اولا Poor specification: لو مش محددين بالظبط البرنامج المفروض يعمل إيه، غالبًا مش هنهتم بالتفاصيل أو الedge cases، وساعتها هتفوتنا حالات معينة مش هنتعامل معاها صح (يعني ممكن input معين يبوّظ الدنيا أو يدي نتايج غلط).
2. الIncomplete programs: وإحنا شغالين على البرنامج، طبيعي يبقى فيه حالات لسه ما تعاملناش معاها. ده عادي. المهم إننا نعرف إمتى نكون فعلاً غطّينا كل الحالات.
3. الUnexpected arguments: أي function بتاخد arguments، ولو جالها argument مش بنتعامل معاه، يبقى عندنا مشكلة. مثال: لو نادينا sqrt(-1.2)، ده رياضيا مش صح.
4. الUnexpected input: البرامج دايمًا بتقرأ بيانات (من الكيبورد، من فايلات، من الnetwork...). البرنامج بيتوقّع إن المستخدم يدخل رقم مثلاً، طب إيه اللي يحصل لو كتب "aw, shut up!" بدل ما يكتب رقم؟ ساعتها يحصل error.
5. الUnexpected state: أغلب البرامج بتخزّن بيانات كتير (أو ما يُعرف بـ state) علشان باقي أجزاء البرنامج تستخدمها. زي: لستة أسماء، نمر تليفونات، أو vector فيه درجات حرارة. طب لو البيانات دي ناقصة أو فيها غلط؟ البرنامج لازم يعرف يتصرف.
6. الLogical errors: دي الأكواد اللي مش بتعمل اللي المفروض تعمله. يعني مفيش crash، بس النتيجة غلط. النوع ده لازم نكتشفه ونعالجه بنفسنا.


القائمة دي مفيدة كـ checklist نراجع بيها إحنا وصلنا لفين في شغل البرنامج.
مفيش برنامج نقدر نقول إنه "جاهز" غير لما نكون فكّرنا في كل المصادر دي للـ errors.
وفي الحقيقة، من الحكمة إننا نبدأ ناخدهم في اعتبارنا من أول المشروع، لإن البرنامج اللي اتلمّ بسرعة ومن غير تفكير في الـ errors، غالبًا مش هيتصلّح غير بإعادة كتابة كاملة.


* الcompile-time errors
وإنت بتكتب برامج، أول خط دفاع ليك ضد errors هو الـ compiler. قبل ما يطلع الكود النهائي، الـ compiler بيحلل الكود علشان يكتشف syntax errors وtype errors. وما يسمحلكش تكمل غير لو اتأكد إن البرنامج ماشي مع قواعد اللغة.

كتير من الـ errors اللي الـ compiler بيطلعها بتكون بس "أغلاط غبية" زي typos أو edits ناقصة.
بس فيه كمان errors بتيجي من إنك مش فاهم كويس إزاي أجزاء البرنامج بتشتغل مع بعض.

في الأول، المبرمج المبتدئ بيحس إن الـ compiler بيركز اوي في تفاصيل ممكن متكونش مهمه.
بس لما تتعلم تستخدم إمكانيات اللغة – وخصوصًا الـ type system – علشان تعبّر بيها عن أفكارك، هتبتدي تحترم قدرة الـ compiler على إنه يلقط مشاكل كانت ممكن تضيع منك ساعات علشان تكتشفها.
